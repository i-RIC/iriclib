version: '{branch}-{build}'

# Skip any branches that start with two underscores (__)
branches:
  except:
    - /__.*/
    - develop_v4

# commit messages containing [skip ci] or [skip appveyor] won't be built
# see https://www.appveyor.com/docs/how-to/filtering-commits/
skip_tags: true

# To create: login to AppVeyor profile and select Account->Encrypt YAML
environment:
  scharlton2_access_token:
    secure: dZo8X7uIxkv0RAieGg6J4zNyILq/3RxgzrI3rf4y3CY4rRHKHasO6FxpKI5USzs9
  scharlton2_online_update_access_token:
    secure: CS9f7K3/ePypXUjKJ5S5iX2WFLNpC0IH4LEC9jYXdvcNbaM7CFl0fU5Ws/qUDgvo
  iric_access_token:
    secure: jCnsDz8WNLsiCXa3BhIfDU8A5kRMruC9eUedcWKW7lOKhGGiHZYdRhaaN2cl5UNg
  iric_online_update_access_token:
    secure: WDcJrM7sx9jagk006F3OtXqomb90MlJcRIs8LoAyvT0wVzvG+UxeaW+oG9GWb1t8
  kskinoue0612_access_token:
    secure: n1Pd5On6t3P0OlAAHEoQpugccvsRvXcUmQjmgFI/hsSFkXqNKNxyC4kF1/KllT4Q
  kskinoue0612_online_update_access_token:
    secure: GzdhhFKWjeLDM22U4ZcrMkAGEEnZLMVbfBR9W8uRQ/LqOtvX2qjPXvC3nvxxWeUc

image:
  - Visual Studio 2013

# called before clone
init:
  - echo %APPVEYOR_BUILD_WORKER_IMAGE%
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" (set GENERATOR="Visual Studio 15 2017 Win64" && set SGEN=vs2017-x64)
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" (set GENERATOR="Visual Studio 14 2015 Win64" && set SGEN=vs2015-x64)
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2013" (set GENERATOR="Visual Studio 12 2013 Win64" && set SGEN=vs2013-x64)
  - echo %GENERATOR%
  - echo %Configuration%
  - if "%Configuration%"=="Debug"   (set config=debug)
  - if "%Configuration%"=="Release" (set config=release)
  - set BUILD_TOOLS=OFF
  - FOR /F "tokens=3 delims= " %%i in ('echo %APPVEYOR_BUILD_WORKER_IMAGE%') do set YEAR=%%i
  - echo %YEAR%
  # Need to set version numbers for cache:
  - cd C:\iricdev
  - curl -L -O https://github.com/i-RIC/iricdev/archive/master.zip
  - 7z e master.zip
  - rd iricdev-master
  - del master.zip
  # master.zip files have unix file endings
  - unix2dos *
  - copy appveyor_programs.prop programs.prop
  - call versions.cmd
  - cd C:\iricdev\lib\src\iriclib-git
  - if "%CGNSLIB_VER%"=="3.2.1" (set CGNSLIB_VER=%CGNSLIB_VER%-patch1)
  - echo %HDF5_VER%
  - echo %CGNSLIB_VER%
  - ps: $UploadRelease = (($env:Configuration -eq "Release") -AND ($env:APPVEYOR_REPO_BRANCH -eq "develop") -AND (!$env:APPVEYOR_PULL_REQUEST_NUMBER) -AND ($env:SGEN -eq "vs2013-x64"))
  - ps: Write-Output $UploadRelease
  # Only commit and push to master branch or debug-appveyor branch (for testing)
  - ps: $CommitAndPush = (($env:Configuration -eq "Release") -AND ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2013") -AND (($env:APPVEYOR_REPO_BRANCH -eq "master") -OR ($env:APPVEYOR_REPO_BRANCH -eq "develop")) -AND (!$env:APPVEYOR_PULL_REQUEST_NUMBER))
  - ps: Write-Output $CommitAndPush


# doesn't seem to be able to use environmental vars
clone_folder: C:\iricdev\lib\src\iriclib-git

configuration:
  - Debug
  - Release

matrix:
  fast_finish: true

# Note mkdir is from Git (C:\Program Files\Git\usr\bin\mkdir.exe)
# It might give unexpected results (use md instead)
#
# Qt 5.5 only supports VS2013
before_build:
  - call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" x86_amd64
  - cd C:\iricdev
  # build C:\iricdev\lib\install\hdf5-%HDF5_VER%\%config%
  - msbuild /nologo /target:hdf5-build-%config% iricdev.proj
  # build C:\iricdev\lib\install\cgnslib-%CGNSLIB_VER%\%config%
  - msbuild /nologo /target:cgnslib-build-%config% iricdev.proj


# build using cmake tools
build_script:
  - cd C:\iricdev
  - if "%Configuration%"=="Debug"   ( msbuild /nologo /target:iriclib-git-build-%config% iricdev.proj )
  - if "%Configuration%"=="Release" ( msbuild /nologo /target:appveyor-iriclib-artifacts iricdev.proj )


after_build:
  - if "%Configuration%"=="Release" ( appveyor PushArtifact C:\iricdev\lib\src\iriclib-git\_artifacts\libs.zip )

# see https://www.appveyor.com/docs/build-cache/
# env vars used by cache: need to be set in environment: or by init:
# see https://www.appveyor.com/docs/build-configuration/#build-pipeline
cache:
  - C:\iricdev\lib\install\hdf5-%HDF5_VER%\%config%       -> C:\iricdev\build-hdf5.cmake
  - C:\iricdev\lib\install\cgnslib-%CGNSLIB_VER%\%config% -> C:\iricdev\build-cgnslib.cmake

on_success:
  - ps: |
      if ($UploadRelease) {
        # set current working directory
        Set-Location C:\iricdev\lib\src\iriclib-git -ErrorAction Stop

        # checkout entire branch
        git checkout $env:APPVEYOR_REPO_BRANCH 2>&1 | Out-Null
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # update CMakeLists.txt version number for iriclib
        (Get-Content .\CMakeLists.txt) | Foreach-Object {
          if ($_ -match '  VERSION (?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$') {
            $patch = 1 + $Matches['patch']
            $env:IRICLIB_VER = $Matches['major'] + "." + $Matches['minor'] + "." + $patch
            return "  VERSION " + $env:IRICLIB_VER
          }
          return $_
        } | Set-Content .\CMakeLists.txt

        git config --global credential.helper store
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # determine which access token to use and whether to use a branch
        # or not
        $branch = $True
        if ($env:APPVEYOR_REPO_NAME -eq "i-RIC/iriclib") {
          $access_token = $env:iric_access_token
          $branch = $False
        }
        if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/iriclib") {
          $access_token = $env:scharlton2_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/iriclib") {
          $access_token = $env:kskinoue0612_access_token
        }
        if ($branch) {
          # create branch when remote is not "i-RIC/iriclib"
          # branches starting with '__' aren't automatically built by appveyor
          git checkout -qb __$env:APPVEYOR_JOB_ID 2>&1 | Out-Null
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }

        # configure git for commit and push
        Add-Content "$HOME\.git-credentials" "https://$($access_token):x-oauth-basic@github.com`n" -ErrorAction Stop
        git config --global user.email "iric.appveyor@gmail.com"
        git config --global user.name "iric.appveyor"
        git config --global core.safecrlf false
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # commit CMakeLists.txt with [skip ci]
        git add CMakeLists.txt
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        git commit -m "[skip ci] built by iric.appveyor" 2>&1 | Out-Null
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # store new commit
        $env:target_commitish = (git log -n1 --format=format:"%H")

        # sometimes output from a command is interpreted as an error
        # so output needs to be redirected to null
        if ($branch) {
          git push --set-upstream origin __$env:APPVEYOR_JOB_ID 2>&1 | Out-Null
        } else {
          git push 2>&1 | Out-Null
        }
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # re-run cmake with new CMAKE_INSTALL_PREFIX lib\install\iriclib-$env:IRICLIB_VER
        Set-Location C:\iricdev\lib\src\iriclib-git\_build_release -ErrorAction Stop
        cmake -DCMAKE_INSTALL_PREFIX:PATH=C:\iricdev\lib\install\iriclib-$env:IRICLIB_VER .
        cmake --build . --target install

        # zip lib\install
        Set-Location C:\iricdev\ -ErrorAction Stop
        7z a -tzip iricsdk.zip .\lib\install
        Push-AppveyorArtifact iricsdk.zip

        # hash artifact
        Write-Output "Get-FileHash iricsdk.zip:"
        Get-FileHash C:\iricdev\iricsdk.zip
      }

  - ps: |
      if ($UploadRelease) {
        # GET /repos/{owner}/{repo}/releases
        # see https://docs.github.com/en/rest/reference/repos#releases
        # see https://docs.github.com/ja/rest/reference/repos#releases
        #
        $releases_url_iric         = "https://api.github.com/repos/i-RIC/iriclib/releases"
        $releases_url_scharlton2   = "https://api.github.com/repos/scharlton2/iriclib/releases"
        $releases_url_kskinoue0612 = "https://api.github.com/repos/kskinoue0612/iriclib/releases"

        if ($env:APPVEYOR_REPO_NAME -eq "i-RIC/iriclib") {
          $releases_url = $releases_url_iric
          $access_token = $env:iric_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/iriclib") {
          $releases_url = $releases_url_scharlton2
          $access_token = $env:scharlton2_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/iriclib") {
          $releases_url = $releases_url_kskinoue0612
          $access_token = $env:kskinoue0612_access_token
        }

        # create headers dictionary
        $h = @{"Authorization" = "token $access_token"}

        # # get latest release tag
        # # GET /repos/{owner}/{repo}/releases/latest
        # # see https://docs.github.com/en/rest/reference/repos#get-the-latest-release
        # # see https://docs.github.com/ja/rest/reference/repos#get-the-latest-release
        # #
        # $latest = (Invoke-WebRequest -Uri "$releases_url/latest" -Headers $h -Method GET).Content | ConvertFrom-Json
        # if (! ($latest.tag_name -match "^v(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
        #   # partially based on https://semver.org/
        #   # must be v + major.minor.patch
        #   throw "Bad tag"
        # }
        if (! ($env:IRICLIB_VER -match "^(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
          throw "Bad version"
        }

        # Note: draft is set to true so that no notifications are sent yet

        # create release
        # POST /repos/{owner}/{repo}/releases
        # see https://docs.github.com/en/rest/reference/repos#create-a-release
        # see https://docs.github.com/ja/rest/reference/repos#create-a-release
        #
        #$patch = 1 + $matches["patch"]
        $patch = $matches["patch"]
        $create = @{
          "tag_name"         = "v" + $matches["major"] + "." + $matches["minor"] + "." + $patch;
          "target_commitish" = "$env:target_commitish";
          "name"             = "iriclib " + $matches["major"] + "." + $matches["minor"] + "." + $patch
          "draft"            = $true
        }
        $create_json = $create | ConvertTo-Json
        $release = Invoke-WebRequest -Uri "$releases_url" -Headers $h -Method POST -Body $create_json

        # upload artifact (asset)
        # POST /repos/{owner}/{repo}/releases/{release_id}/assets
        # see https://docs.github.com/en/rest/reference/repos#upload-a-release-asset
        # see https://docs.github.com/ja/rest/reference/repos#upload-a-release-asset
        #
        $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
        if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
          # expecting URI{?name,label}
          # ie https://uploads.github.com/repos/scharlton2/iriclib/releases/24058628/assets{?name,label}
          throw "Bad upload_url"
        }
        $upload_uri = $matches[1] + "?name=libs-$env:IRICLIB_VER.zip"
        $h["Content-type"] = "application/zip"
        $bytes = [System.IO.File]::ReadAllBytes("$env:APPVEYOR_BUILD_FOLDER\_artifacts\libs.zip")
        $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

        # upload sdk
        $upload_uri = $matches[1] + "?name=iricsdk-$env:IRICLIB_VER.zip"
        $bytes = [System.IO.File]::ReadAllBytes("C:\iricdev\iricsdk.zip")
        $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

        # Note: draft is now set to false so that notifications are sent with the correct list of assets

        # update release
        # PATCH /repos/{owner}/{repo}/releases/{release_id}
        # see https://docs.github.com/en/rest/reference/repos#update-a-release
        # see https://docs.github.com/ja/rest/reference/repos#update-a-release
        #
        $release_id = ($release.Content | ConvertFrom-Json).id
        $h.Remove("Content-type")
        $update = @{ "draft" = $false }
        $update_json = $update | ConvertTo-Json
        $release = Invoke-WebRequest -Uri "$releases_url/$release_id" -Headers $h -Method PATCH -Body $update_json

        # display download url
        Write-Output "$((($release.Content | ConvertFrom-Json).assets).browser_download_url)"
        Get-FileHash "$env:APPVEYOR_BUILD_FOLDER\_artifacts\libs.zip"
        Get-FileHash "C:\iricdev\iricsdk.zip"
      }

  - ps: |
      if ($CommitAndPush) {
        # online_update urls
        $remote_url_iric         = "https://github.com/i-RIC/online_update.git"
        $remote_url_scharlton2   = "https://github.com/scharlton2/online_update.git"
        $remote_url_kskinoue0612 = "https://github.com/kskinoue0612/online_update.git"

        $branch = $True
        if ($env:APPVEYOR_REPO_NAME -eq "i-RIC/iriclib") {
          $remote_url = $remote_url_iric
          $access_token = $env:iric_online_update_access_token
          $branch = $False
        }
        if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/iriclib") {
          $remote_url = $remote_url_scharlton2
          # online_update_2020_05_17 expires after a year if not used
          $access_token = $env:scharlton2_online_update_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/iriclib") {
          $remote_url = $remote_url_kskinoue0612
          $access_token = $env:kskinoue0612_online_update_access_token
        }

        Set-Location \ -ErrorAction Stop
        git clone -q --branch=master --depth 1 $remote_url online_update 2>&1 | Out-Null
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        Set-Location .\online_update -ErrorAction Stop

        if ($branch) {
          # create branch when remote is not "i-RIC/prepost-gui"
          # branches starting with '__' aren't automatically built by appveyor
          git checkout -qb __$env:APPVEYOR_JOB_ID
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }

        # update data\definition.xml and meta\package.xml from dev_src\packages\gui.prepost

        if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
          $v=(Select-String -Path prod_src\packages\gui.prepost\meta\package.xml -Pattern "(?<=<Version>)(.*)(?=</Version>)").Matches.Value -split "\."
          $files=@('prod_src\packages\gui.prepost\data\definition.xml', `
                  'prod_src\packages\gui.prepost\meta\package.xml')
        }
        if ($env:APPVEYOR_REPO_BRANCH -eq "develop") {
          $v=(Select-String -Path dev_src\packages\gui.prepost\meta\package.xml -Pattern "(?<=<Version>)(.*)(?=</Version>)").Matches.Value -split "\."
          $files=@('dev_src\packages\gui.prepost\data\definition.xml', `
                  'dev_src\packages\gui.prepost\meta\package.xml')
        }
        $v[3] = 1 + $v[3]
        $env:VERSION = $v -join "."
        $tokyo_tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("Tokyo Standard Time")
        $tokyo_date = [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), $tokyo_tz)
        $env:RELEASE_DATE = $(Get-Date $tokyo_date -Format s).Substring(0,10)
        $env:RELEASE = $env:RELEASE_DATE -replace '-', '.'
        $env:CAPTION = "iRIC GUI " + $v[0] + "." + $v[1] + "." + $v[2]
        foreach ($file in $files) {
          (Get-Content $file) | Foreach-Object {
            $_ -replace "(?<=<Version>)(.*)(?=</Version>)",           "$env:VERSION" `
               -replace "`" version=`"([^`"]*)`"",                    "`" version=`"$env:VERSION`"" `
               -replace "(?<=<ReleaseDate>)(.*)(?=</ReleaseDate>)",   "$env:RELEASE_DATE" `
               -replace "release=`"([^`"]*)`"",                       "release=`"$env:RELEASE`"" `
               -replace "caption=`"([^`"]*)`"",                       "caption=`"$env:CAPTION`"" `
               -replace "iriclib-github-sha1=`"([^`"]*)`"",           "iriclib-github-sha1=`"$env:APPVEYOR_REPO_COMMIT`""
          } | Set-Content $file
        }

        if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
          # distribute iriclib.dll
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\bin\iriclib.dll \online_update\prod_src\packages\gui.prepost\data\iriclib.dll -ErrorAction Stop
          # distribute SDK
          # For C
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\lib\iriclib.lib \online_update\prod_src\packages\gui.prepost\data\sdk\c\iriclib_x64.lib -ErrorAction Stop
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\include\iriclib.h \online_update\prod_src\packages\gui.prepost\data\sdk\c\iriclib.h -ErrorAction Stop
          # For FORTRAN
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\lib\iriclib.lib \online_update\prod_src\packages\gui.prepost\data\sdk\c\iriclib_x64_ifort.lib -ErrorAction Stop
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\include\iriclib_f.h \online_update\prod_src\packages\gui.prepost\data\sdk\c\iriclib_f.h -ErrorAction Stop
          # For Python
          # @todo implement this

          Set-Location \online_update\prod_src -ErrorAction Stop
          # run repogen
          C:\Qt\Tools\QtInstallerFramework\2.0\bin\repogen.exe -p packages --update --include gui.prepost ..\prod
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }
        if ($env:APPVEYOR_REPO_BRANCH -eq "develop") {
          # distribute iriclib.dll
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\bin\iriclib.dll \online_update\dev_src\packages\gui.prepost\data\iriclib.dll -ErrorAction Stop
          # distribute SDK
          # For C
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\lib\iriclib.lib \online_update\dev_src\packages\gui.prepost\data\sdk\c\iriclib_x64.lib -ErrorAction Stop
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\include\iriclib.h \online_update\dev_src\packages\gui.prepost\data\sdk\c\iriclib.h -ErrorAction Stop
          # For FORTRAN
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\lib\iriclib.lib \online_update\dev_src\packages\gui.prepost\data\sdk\c\iriclib_x64_ifort.lib -ErrorAction Stop
          Copy-Item C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\include\iriclib_f.h \online_update\dev_src\packages\gui.prepost\data\sdk\c\iriclib_f.h -ErrorAction Stop
          # For Python
          # @todo implement this
          
          Set-Location \online_update\dev_src -ErrorAction Stop
          # run repogen
          C:\Qt\Tools\QtInstallerFramework\2.0\bin\repogen.exe -p packages --update --include gui.prepost ..\dev
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }

        # run normalize_updatexml.py to normalize Updates.xml.
        Set-Location \online_update -ErrorAction Stop
        py normalize_updatexml.py
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # commit and push to https://github.com/i-RIC/online_update.git
        git config --global credential.helper store
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # configure git for commit and push
        Add-Content "$HOME\.git-credentials" "https://$($access_token):x-oauth-basic@github.com`n" -ErrorAction Stop
        git config --global user.email "iric.appveyor@gmail.com"
        git config --global user.name "iric.appveyor"
        git config --global core.safecrlf false
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git add -A *.7z *.sha1 *.xml *.dll *.exe *.qm *.h *.lib
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # Qt dictionaries are now included in gui.runtime package.
        git reset **/qt_*.qm
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git commit -m "built by iric.appveyor"
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        if ($branch) {
          git push --set-upstream origin __$env:APPVEYOR_JOB_ID 2>&1 | Out-Null
        } else {
          git push --set-upstream origin master 2>&1 | Out-Null
        }
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git status
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        Write-Output "iriclib-github-sha1=`"$env:APPVEYOR_REPO_COMMIT`""
        Get-FileHash C:\iricdev\lib\src\iriclib-git\_build_release\INSTALL\bin\iriclib.dll
      }
